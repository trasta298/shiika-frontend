/* tslint:disable */
/* eslint-disable */
/**
 * Shiika
 * This is siika 
 *
 * The version of the OpenAPI document: 2.1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Fsf
 */
export interface Fsf {
    /**
     * 
     * @type {string}
     * @memberof Fsf
     */
    'first': string;
    /**
     * 
     * @type {string}
     * @memberof Fsf
     */
    'second': string;
    /**
     * 
     * @type {string}
     * @memberof Fsf
     */
    'third': string;
}
/**
 * 
 * @export
 * @interface Kaminoku
 */
export interface Kaminoku {
    /**
     * 
     * @type {string}
     * @memberof Kaminoku
     */
    'id': string;
    /**
     * 
     * @type {Fsf}
     * @memberof Kaminoku
     */
    'content': Fsf;
    /**
     * 
     * @type {string}
     * @memberof Kaminoku
     */
    'userid': string;
}
/**
 * 
 * @export
 * @interface Login
 */
export interface Login {
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'userid': string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface RequestKaminoku
 */
export interface RequestKaminoku {
    /**
     * 
     * @type {Fsf}
     * @memberof RequestKaminoku
     */
    'content': Fsf;
}
/**
 * 
 * @export
 * @interface RequestSimonoku
 */
export interface RequestSimonoku {
    /**
     * 
     * @type {Ss}
     * @memberof RequestSimonoku
     */
    'content': Ss;
}
/**
 * 
 * @export
 * @interface Simonoku
 */
export interface Simonoku {
    /**
     * 
     * @type {string}
     * @memberof Simonoku
     */
    'id': string;
    /**
     * 
     * @type {Ss}
     * @memberof Simonoku
     */
    'content': Ss;
    /**
     * 
     * @type {string}
     * @memberof Simonoku
     */
    'userid': string;
}
/**
 * 
 * @export
 * @interface Ss
 */
export interface Ss {
    /**
     * 
     * @type {string}
     * @memberof Ss
     */
    'fourth': string;
    /**
     * 
     * @type {string}
     * @memberof Ss
     */
    'fifth': string;
}
/**
 * 
 * @export
 * @interface Tanka
 */
export interface Tanka {
    /**
     * 
     * @type {Kaminoku}
     * @memberof Tanka
     */
    'kaminoku': Kaminoku;
    /**
     * 
     * @type {Simonoku}
     * @memberof Tanka
     */
    'simonoku': Simonoku;
}

/**
 * KaminokuApi - axios parameter creator
 * @export
 */
export const KaminokuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get kaminoku array
         * @summary get random kaminokus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKaminoku: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/kaminoku`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get a kaminoku by id
         * @summary get a kaminoku by id
         * @param {string} kaminokuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKaminokuDetail: async (kaminokuId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kaminokuId' is not null or undefined
            assertParamExists('getKaminokuDetail', 'kaminokuId', kaminokuId)
            const localVarPath = `/kaminoku/{kaminoku_id}`
                .replace(`{${"kaminoku_id"}}`, encodeURIComponent(String(kaminokuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * send kaminoku content
         * @summary send kaminoku content
         * @param {RequestKaminoku} requestKaminoku post kaminoku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postKaminoku: async (requestKaminoku: RequestKaminoku, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestKaminoku' is not null or undefined
            assertParamExists('postKaminoku', 'requestKaminoku', requestKaminoku)
            const localVarPath = `/kaminoku`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestKaminoku, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KaminokuApi - functional programming interface
 * @export
 */
export const KaminokuApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = KaminokuApiAxiosParamCreator(configuration)
    return {
        /**
         * get kaminoku array
         * @summary get random kaminokus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKaminoku(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Kaminoku>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKaminoku(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * get a kaminoku by id
         * @summary get a kaminoku by id
         * @param {string} kaminokuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKaminokuDetail(kaminokuId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Kaminoku>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKaminokuDetail(kaminokuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * send kaminoku content
         * @summary send kaminoku content
         * @param {RequestKaminoku} requestKaminoku post kaminoku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postKaminoku(requestKaminoku: RequestKaminoku, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postKaminoku(requestKaminoku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * KaminokuApi - factory interface
 * @export
 */
export const KaminokuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = KaminokuApiFp(configuration)
    return {
        /**
         * get kaminoku array
         * @summary get random kaminokus
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKaminoku(options?: any): AxiosPromise<Array<Kaminoku>> {
            return localVarFp.getKaminoku(options).then((request) => request(axios, basePath));
        },
        /**
         * get a kaminoku by id
         * @summary get a kaminoku by id
         * @param {string} kaminokuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKaminokuDetail(kaminokuId: string, options?: any): AxiosPromise<Kaminoku> {
            return localVarFp.getKaminokuDetail(kaminokuId, options).then((request) => request(axios, basePath));
        },
        /**
         * send kaminoku content
         * @summary send kaminoku content
         * @param {RequestKaminoku} requestKaminoku post kaminoku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postKaminoku(requestKaminoku: RequestKaminoku, options?: any): AxiosPromise<void> {
            return localVarFp.postKaminoku(requestKaminoku, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KaminokuApi - object-oriented interface
 * @export
 * @class KaminokuApi
 * @extends {BaseAPI}
 */
export class KaminokuApi extends BaseAPI {
    /**
     * get kaminoku array
     * @summary get random kaminokus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KaminokuApi
     */
    public getKaminoku(options?: AxiosRequestConfig) {
        return KaminokuApiFp(this.configuration).getKaminoku(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a kaminoku by id
     * @summary get a kaminoku by id
     * @param {string} kaminokuId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KaminokuApi
     */
    public getKaminokuDetail(kaminokuId: string, options?: AxiosRequestConfig) {
        return KaminokuApiFp(this.configuration).getKaminokuDetail(kaminokuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * send kaminoku content
     * @summary send kaminoku content
     * @param {RequestKaminoku} requestKaminoku post kaminoku
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KaminokuApi
     */
    public postKaminoku(requestKaminoku: RequestKaminoku, options?: AxiosRequestConfig) {
        return KaminokuApiFp(this.configuration).postKaminoku(requestKaminoku, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * send user name and password for login
         * @summary send user name and password for login
         * @param {Login} login for login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (login: Login, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('postLogin', 'login', login)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(login, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * send user name and password for sign up
         * @summary send user name and password for sign up
         * @param {Login} login for login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRegister: async (login: Login, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'login' is not null or undefined
            assertParamExists('postRegister', 'login', login)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(login, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * send user name and password for login
         * @summary send user name and password for login
         * @param {Login} login for login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(login: Login, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postLogin(login, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * send user name and password for sign up
         * @summary send user name and password for sign up
         * @param {Login} login for login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRegister(login: Login, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRegister(login, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * send user name and password for login
         * @summary send user name and password for login
         * @param {Login} login for login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin(login: Login, options?: any): AxiosPromise<void> {
            return localVarFp.postLogin(login, options).then((request) => request(axios, basePath));
        },
        /**
         * send user name and password for sign up
         * @summary send user name and password for sign up
         * @param {Login} login for login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRegister(login: Login, options?: any): AxiosPromise<void> {
            return localVarFp.postRegister(login, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * send user name and password for login
     * @summary send user name and password for login
     * @param {Login} login for login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public postLogin(login: Login, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).postLogin(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * send user name and password for sign up
     * @summary send user name and password for sign up
     * @param {Login} login for login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public postRegister(login: Login, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).postRegister(login, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SimonokuTankaApi - axios parameter creator
 * @export
 */
export const SimonokuTankaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} kaminokuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kaminokuKaminokuIdSimonokuGet: async (kaminokuId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kaminokuId' is not null or undefined
            assertParamExists('kaminokuKaminokuIdSimonokuGet', 'kaminokuId', kaminokuId)
            const localVarPath = `/kaminoku/{kaminoku_id}/simonoku`
                .replace(`{${"kaminoku_id"}}`, encodeURIComponent(String(kaminokuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} kaminokuId 
         * @param {RequestSimonoku} requestSimonoku post simonoku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kaminokuKaminokuIdSimonokuPost: async (kaminokuId: string, requestSimonoku: RequestSimonoku, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'kaminokuId' is not null or undefined
            assertParamExists('kaminokuKaminokuIdSimonokuPost', 'kaminokuId', kaminokuId)
            // verify required parameter 'requestSimonoku' is not null or undefined
            assertParamExists('kaminokuKaminokuIdSimonokuPost', 'requestSimonoku', requestSimonoku)
            const localVarPath = `/kaminoku/{kaminoku_id}/simonoku`
                .replace(`{${"kaminoku_id"}}`, encodeURIComponent(String(kaminokuId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestSimonoku, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simonokuGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/simonoku`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SimonokuTankaApi - functional programming interface
 * @export
 */
export const SimonokuTankaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SimonokuTankaApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} kaminokuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kaminokuKaminokuIdSimonokuGet(kaminokuId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tanka>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kaminokuKaminokuIdSimonokuGet(kaminokuId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} kaminokuId 
         * @param {RequestSimonoku} requestSimonoku post simonoku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kaminokuKaminokuIdSimonokuPost(kaminokuId: string, requestSimonoku: RequestSimonoku, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.kaminokuKaminokuIdSimonokuPost(kaminokuId, requestSimonoku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async simonokuGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tanka>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.simonokuGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SimonokuTankaApi - factory interface
 * @export
 */
export const SimonokuTankaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SimonokuTankaApiFp(configuration)
    return {
        /**
         * 
         * @param {string} kaminokuId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kaminokuKaminokuIdSimonokuGet(kaminokuId: string, options?: any): AxiosPromise<Array<Tanka>> {
            return localVarFp.kaminokuKaminokuIdSimonokuGet(kaminokuId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} kaminokuId 
         * @param {RequestSimonoku} requestSimonoku post simonoku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kaminokuKaminokuIdSimonokuPost(kaminokuId: string, requestSimonoku: RequestSimonoku, options?: any): AxiosPromise<void> {
            return localVarFp.kaminokuKaminokuIdSimonokuPost(kaminokuId, requestSimonoku, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simonokuGet(options?: any): AxiosPromise<Array<Tanka>> {
            return localVarFp.simonokuGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SimonokuTankaApi - object-oriented interface
 * @export
 * @class SimonokuTankaApi
 * @extends {BaseAPI}
 */
export class SimonokuTankaApi extends BaseAPI {
    /**
     * 
     * @param {string} kaminokuId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimonokuTankaApi
     */
    public kaminokuKaminokuIdSimonokuGet(kaminokuId: string, options?: AxiosRequestConfig) {
        return SimonokuTankaApiFp(this.configuration).kaminokuKaminokuIdSimonokuGet(kaminokuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} kaminokuId 
     * @param {RequestSimonoku} requestSimonoku post simonoku
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimonokuTankaApi
     */
    public kaminokuKaminokuIdSimonokuPost(kaminokuId: string, requestSimonoku: RequestSimonoku, options?: AxiosRequestConfig) {
        return SimonokuTankaApiFp(this.configuration).kaminokuKaminokuIdSimonokuPost(kaminokuId, requestSimonoku, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimonokuTankaApi
     */
    public simonokuGet(options?: AxiosRequestConfig) {
        return SimonokuTankaApiFp(this.configuration).simonokuGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userKaminokuGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/kaminoku`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSimonokuGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/simonoku`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userKaminokuGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Kaminoku>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userKaminokuGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSimonokuGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tanka>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userSimonokuGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userKaminokuGet(options?: any): AxiosPromise<Array<Kaminoku>> {
            return localVarFp.userKaminokuGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSimonokuGet(options?: any): AxiosPromise<Array<Tanka>> {
            return localVarFp.userSimonokuGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userKaminokuGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userKaminokuGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userSimonokuGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userSimonokuGet(options).then((request) => request(this.axios, this.basePath));
    }
}

export class Apis extends BaseAPI {
    /**
     * get kaminoku array
     * @summary get random kaminokus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KaminokuApi
     */
    public getKaminoku(options?: AxiosRequestConfig) {
        return KaminokuApiFp(this.configuration).getKaminoku(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get a kaminoku by id
     * @summary get a kaminoku by id
     * @param {string} kaminokuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KaminokuApi
     */
    public getKaminokuDetail(kaminokuId: string, options?: AxiosRequestConfig) {
        return KaminokuApiFp(this.configuration).getKaminokuDetail(kaminokuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * send kaminoku content
     * @summary send kaminoku content
     * @param {RequestKaminoku} requestKaminoku post kaminoku
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KaminokuApi
     */
    public postKaminoku(requestKaminoku: RequestKaminoku, options?: AxiosRequestConfig) {
        return KaminokuApiFp(this.configuration).postKaminoku(requestKaminoku, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * send user name and password for login
     * @summary send user name and password for login
     * @param {Login} login for login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public postLogin(login: Login, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).postLogin(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * send user name and password for sign up
     * @summary send user name and password for sign up
     * @param {Login} login for login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public postRegister(login: Login, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).postRegister(login, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} kaminokuId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimonokuTankaApi
     */
    public kaminokuKaminokuIdSimonokuGet(kaminokuId: string, options?: AxiosRequestConfig) {
        return SimonokuTankaApiFp(this.configuration).kaminokuKaminokuIdSimonokuGet(kaminokuId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {string} kaminokuId
     * @param {RequestSimonoku} requestSimonoku post simonoku
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimonokuTankaApi
     */
    public kaminokuKaminokuIdSimonokuPost(kaminokuId: string, requestSimonoku: RequestSimonoku, options?: AxiosRequestConfig) {
        return SimonokuTankaApiFp(this.configuration).kaminokuKaminokuIdSimonokuPost(kaminokuId, requestSimonoku, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimonokuTankaApi
     */
    public simonokuGet(options?: AxiosRequestConfig) {
        return SimonokuTankaApiFp(this.configuration).simonokuGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userKaminokuGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userKaminokuGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userSimonokuGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userSimonokuGet(options).then((request) => request(this.axios, this.basePath));
    }
}
